# This is a workflow to build/launch or rebuild given sceptre CF stack

name: Delete Tesseract

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab, with stack path as argument
  workflow_dispatch:
    inputs:
      region:
        description: which region should Tesseract product be deployed to?
        required: true
        default: us-west-2
      targetEnv:
        description: Provide Git Environment to get deploy credentials from
        required: true
        default: tesseract
jobs:
  # This workflow contains a single job called "build-stack" to deploy Tesseract
  delete-stack:
    name: Destroy Tesseract
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: ${{  github.event.inputs.targetEnv }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Install sceptre
        run: |
          pip3 install sceptre
      # Configure AWS Credentials
      - name: Configuring Deploy user
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEPLOY_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_DEPLOY_SECRET_KEY }}
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE }}
          role-duration-seconds: 3600
          aws-region: ${{  github.event.inputs.region }}

      # deploy
      - name: delete via sceptre
        id: delete_tesseract
        run: |
          aws sts get-caller-identity
          cd infrastructure
          sh vars/var_generator.sh ${{  github.event.inputs.region }}
          echo "**** Tearing down Workers"
          sceptre --var-file=vars/deployment_vars.yaml delete -y worker-artifacts/tesseract-dyn-loader.yaml
          sceptre --var-file=vars/deployment_vars.yaml delete -y worker-artifacts/tes-athena-get-resolver.yaml
          sceptre --var-file=vars/deployment_vars.yaml delete -y worker-artifacts/tes-lambda.yaml
          sceptre --var-file=vars/deployment_vars.yaml delete -y worker-artifacts/tesseract-connector.yaml
          echo "**** Tearing down Tesflow & Sync"
          sceptre --var-file=vars/deployment_vars.yaml delete -y tessync/tesseract-sync-api.yaml
          sceptre --var-file=vars/deployment_vars.yaml delete -y tesflow/tesflow.yaml
          echo "**** Tearing down notification system"
          sceptre --var-file=vars/deployment_vars.yaml delete -y reporting/notification-sns.yaml
          echo "**** Tearing down iam assets"
          sceptre --var-file=vars/deployment_vars.yaml delete -y worker-artifacts/lambda-role.yaml
          sceptre --var-file=vars/deployment_vars.yaml delete -y tessync/sync-access-role.yaml
          sceptre --var-file=vars/deployment_vars.yaml delete -y tesflow/tesflow-role.yaml
          sceptre --var-file=vars/deployment_vars.yaml delete -y worker-artifacts/lambda-custom-policy.yaml
          sceptre --var-file=vars/deployment_vars.yaml delete -y tessync/sync-access-policy.yaml
          sceptre --var-file=vars/deployment_vars.yaml delete -y tesflow/tesflow-policy.yaml
          echo "*** Knocking off s3 bucket"
          sceptre --var-file=vars/deployment_vars.yaml delete -y worker-artifacts/tesseract-s3.yaml
      # Notify on slack
      # Always checkout - https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions
      - name: Get GD version of rtCamp actions
        if: ${{ always() }}
        uses: actions/checkout@v2
        with:
          repository: gdcorp-action-public-forks/action-slack-notify
          token: ${{ secrets.CLOUD_CREDS_UPDATE_TKN }}
          path: slack-notify-action

      # Post following message on Job Success
      - name: Success Notifier
        if: ${{ success() }}
        uses: ./slack-notify-action
        env:
          SLACK_CHANNEL: tesseract-deployments
          SLACK_USERNAME: ahpBot
          SLACK_ICON_EMOJI: ':clapping:'
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: 'Stack launch/Update successful for ${{  github.event.inputs.stack_path }} :highfive:'
          SLACK_WEBHOOK: ${{ secrets.SLACK_ALERTS }}
          SLACK_FOOTER: ahpBot GitHub notification

      # Post following message on Job Failure
      - name: Failure Notifier
        if: ${{ failure() }}
        uses: ./slack-notify-action
        env:
          SLACK_CHANNEL: tesseract-deployments
          SLACK_USERNAME: ahpBot
          SLACK_ICON_EMOJI: ':headbang:'
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: 'Stack launch/Update failed for ${{  github.event.inputs.stack_path }} \n ${{steps.build_task.outputs.output}} '
          SLACK_WEBHOOK: ${{ secrets.SLACK_ALERTS }}
          SLACK_FOOTER: ahpBot GitHub notification

      # Post following message on Job Cancellation
      - name: Cancel Notifier
        if: ${{ cancelled() }}
        uses: ./slack-notify-action
        env:
          SLACK_CHANNEL: tesseract-deployments
          SLACK_USERNAME: ahpBot
          SLACK_ICON_EMOJI: ':depressed:'
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: 'Stack launch/Update cancelled for ${{  github.event.inputs.stack_path }} :sad:'
          SLACK_WEBHOOK: ${{ secrets.SLACK_ALERTS }}
          SLACK_FOOTER: ahpBot GitHub notification
